# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


# trigger:
# - main  

# pool:
#   name: Default  # Self-hosted agent pool

# variables:
#   buildConfiguration: 'Release'
#   publishDir: '$(Build.ArtifactStagingDirectory)/publish'

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.0.x'  # Updated to .NET 8
#     installationPath: $(Agent.ToolsDirectory)/dotnet

# - task: DotNetCoreCLI@2
#   displayName: 'Restore NuGet packages'
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Build the project'
#   inputs:
#     command: 'build'
#     arguments: '--configuration $(buildConfiguration)'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Run unit tests'
#   inputs:
#     command: 'test'
#     projects: '**/*Tests.csproj'
#     arguments: '--configuration $(buildConfiguration)'
#     continueOnError: true

# - task: DotNetCoreCLI@2
#   displayName: 'Publish the app'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

# - task: PowerShell@2
#   displayName: 'Deploy to IIS'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $destination = "C:\inetpub\wwwroot\TestApp"
#       Write-Output "Cleaning existing files at $destination..."
#       if (Test-Path $destination) {
#           Remove-Item "$destination\*" -Recurse -Force
#       } else {
#           New-Item -ItemType Directory -Path $destination
#       }

#       Write-Output "Copying new files to $destination..."
#       Copy-Item -Path "$(publishDir)\*" -Destination $destination -Recurse -Force

#       Write-Output "Deployment completed to IIS site folder."

# trigger:
# - main  

# pool:
#   name: Default  # Self-hosted agent pool

# variables:
#   buildConfiguration: 'Release'
#   publishDir: '$(Build.ArtifactStagingDirectory)/publish'

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.0.x'  # Updated to .NET 8
#     installationPath: $(Agent.ToolsDirectory)/dotnet

# - task: DotNetCoreCLI@2
#   displayName: 'Restore NuGet packages'
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Build the project'
#   inputs:
#     command: 'build'
#     arguments: '--configuration $(buildConfiguration)'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Publish the app'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

# - task: PowerShell@2
#   displayName: 'Deploy to IIS'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $destination = "C:\inetpub\wwwroot\TestApp"
#       Write-Output "Cleaning existing files..."
#       Remove-Item "$destination\*" -Recurse -Force

#       Write-Output "Copying files directly to IIS..."
#       Copy-Item -Path "$(publishDir)\*" -Destination $destination -Recurse -Force

#       Write-Output "Deployment completed."

# trigger:
# - main  

# pool:
#   name: Default  # Self-hosted agent pool

# variables:
#   buildConfiguration: 'Release'
#   publishDir: '$(Build.ArtifactStagingDirectory)/publish'
#   siteName: 'AutoAppDemo'
#   physicalPath: 'C:\inetpub\wwwroot\AutoAppDemo'
#   appPoolName: 'AutoAppDemo-pool'

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.0.x'
#     installationPath: $(Agent.ToolsDirectory)/dotnet

# - task: DotNetCoreCLI@2
#   displayName: 'Restore NuGet packages'
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Build the project'
#   inputs:
#     command: 'build'
#     arguments: '--configuration $(buildConfiguration)'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Publish the app'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

# # - task: PowerShell@2
# #   displayName: 'Create IIS Website & App Pool'
# #   inputs:
# #     targetType: 'inline'
# #     script: |
# #       $siteName = "$(siteName)"
# #       $physicalPath = "$(physicalPath)"
# #       $appPoolName = "$(appPoolName)"
# #       $port = 80

# #       Import-Module WebAdministration

# #       Write-Host "Creating physical directory if it doesn't exist..."
# #       if (!(Test-Path $physicalPath)) {
# #           New-Item -Path $physicalPath -ItemType Directory | Out-Null
# #           Write-Host "Created $physicalPath"
# #       } else {
# #           Write-Host "Directory already exists: $physicalPath"
# #       }

# #       Write-Host "Creating Application Pool..."
# #       if (!(Get-WebAppPoolState -Name $appPoolName -ErrorAction SilentlyContinue)) {
# #           New-WebAppPool -Name $appPoolName
# #           Write-Host "Created App Pool: $appPoolName"
# #       } else {
# #           Write-Host "App Pool already exists: $appPoolName"
# #       }

# #       Write-Host "Creating IIS Website..."
# #       if (!(Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
# #           New-Website -Name $siteName -Port $port -PhysicalPath $physicalPath -ApplicationPool $appPoolName
# #           Write-Host "Created IIS Site: $siteName on port $port"
# #       } else {
# #           Write-Host "Website already exists: $siteName"
# #       }

# # - task: PowerShell@2
# #   displayName: 'Deploy to IIS Website'
# #   inputs:
# #     targetType: 'inline'
# #     script: |
# #       $destination = "$(physicalPath)"
# #       Write-Host "Cleaning existing files in $destination..."
# #       Remove-Item "$destination\*" -Recurse -Force -ErrorAction SilentlyContinue

# #       Write-Host "Copying published files to $destination..."
# #       Copy-Item -Path "$(publishDir)\*" -Destination $destination -Recurse -Force

# #       Write-Host "Deployment completed."

# - task: PowerShell@2
#   displayName: 'Deploy AutoAppDemo under Default Web Site'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $siteName = "Default Web Site"
#       $appName = "AutoAppDemo"
#       $appPath = "C:\inetpub\wwwroot\$appName"
#       $appPool = "$appName-pool"
#       $appPort = "8025"

#       Write-Host "Importing WebAdministration Module..."
#       Import-Module WebAdministration

#       try {
#           # Create physical folder
#           if (-Not (Test-Path $appPath)) {
#               New-Item -Path $appPath -ItemType Directory -Force
#               Write-Host "Created folder: $appPath"
#           } else {
#               Write-Host "Folder already exists: $appPath"
#           }

#           # Create App Pool
#           if (-Not (Test-Path "IIS:\AppPools\$appPool")) {
#               New-WebAppPool -Name $appPool
#               Write-Host "Created App Pool: $appPool"
#           } else {
#               Write-Host "App Pool already exists: $appPool"
#           }

#           # Create application under Default Web Site
#           $fullAppPath = "IIS:\Sites\$siteName\$appName"
#           if (-Not (Test-Path $fullAppPath)) {
#               New-WebApplication -Site $siteName -Name $appName -PhysicalPath $appPath -ApplicationPool $appPool
#               Write-Host "Created IIS App at http://localhost/$appName"
#           } else {
#               Write-Host "IIS App already exists: $appName"
#           }

#       } catch {
#           Write-Error "Deployment script failed: $_"
#           exit 1
#       }
# - task: PowerShell@2
#   displayName: 'Copy published files to IIS folder'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $source = "$(publishDir)"
#       $destination = "C:\inetpub\wwwroot\AutoAppDemo"

#       Write-Host "Copying files from $source to $destination..."

#       if (Test-Path $destination) {
#           Remove-Item "$destination\*" -Recurse -Force -ErrorAction SilentlyContinue
#           Write-Host "Cleaned existing content in $destination"
#       }

#       Copy-Item -Path "$source\*" -Destination $destination -Recurse -Force
#       Write-Host "Copied published files successfully!"

# trigger:
# - main  

# pool:
#   name: Default  # Self-hosted agent pool

# variables:
#   buildConfiguration: 'Release'
#   publishDir: '$(Build.ArtifactStagingDirectory)/publish'
#   siteName: 'AutoAppDemo'
#   physicalPath: 'C:\inetpub\wwwroot\AutoAppDemo'
#   appPoolName: 'AutoAppDemo-pool'
#   parentSiteName: 'Optimus App'
#   appPortHttp: 8026
#   appPortHttps: 8025

# steps:
# - task: UseDotNet@2
#   inputs:
#     packageType: 'sdk'
#     version: '8.0.x'
#     installationPath: $(Agent.ToolsDirectory)/dotnet

# - task: DotNetCoreCLI@2
#   displayName: 'Restore NuGet packages'
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Build the project'
#   inputs:
#     command: 'build'
#     arguments: '--configuration $(buildConfiguration)'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2
#   displayName: 'Publish the app'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

# # ZIP the published output
# - task: ArchiveFiles@2
#   displayName: 'Zip Published Output'
#   inputs:
#     rootFolderOrFile: '$(publishDir)'
#     includeRootFolder: false
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/AutoAppDemo.zip'
#     replaceExistingArchive: true

# # Deploy: Create App Pool + App under Optimus App + Extract + Copy
# - task: PowerShell@2
#   displayName: 'Deploy AutoAppDemo under Optimus App'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $siteName = "$(siteName)"
#       $physicalPath = "$(physicalPath)"
#       $appPoolName = "$(appPoolName)"
#       $parentSite = "$(parentSiteName)"
#       $zipPath = "$(Build.ArtifactStagingDirectory)\AutoAppDemo.zip"

#       Import-Module WebAdministration

#       Write-Host "Ensure physical path exists..."
#       if (!(Test-Path $physicalPath)) {
#           New-Item -ItemType Directory -Path $physicalPath | Out-Null
#           Write-Host "Created directory: $physicalPath"
#       } else {
#           Write-Host "Directory already exists: $physicalPath"
#       }

#       Write-Host "Creating/Validating App Pool..."
#       if (!(Test-Path "IIS:\AppPools\$appPoolName")) {
#           New-WebAppPool -Name $appPoolName
#           Write-Host "Created App Pool: $appPoolName"
#       } else {
#           Write-Host "App Pool already exists: $appPoolName"
#       }

#       Write-Host "Creating application under $parentSite..."
#       $appFullPath = "IIS:\Sites\$parentSite\$siteName"
#       if (!(Test-Path $appFullPath)) {
#           New-WebApplication -Site $parentSite -Name $siteName -PhysicalPath $physicalPath -ApplicationPool $appPoolName
#           Write-Host "Created IIS Application under $parentSite as $siteName"
#       } else {
#           Write-Host "Application $siteName already exists under $parentSite"
#       }

#       Write-Host "Cleaning old content in $physicalPath..."
#       Remove-Item "$physicalPath\*" -Recurse -Force -ErrorAction SilentlyContinue

#       Write-Host "Extracting zip to $physicalPath..."
#       Add-Type -AssemblyName System.IO.Compression.FileSystem
#       [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $physicalPath)

#       Write-Host "Deployment completed to $siteName under $parentSite using ports 8026/8025"

trigger:
- main  

pool:
  name: Default  # Self-hosted agent pool

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  siteName: 'AutoAppDemo'
  physicalPath: 'C:\inetpub\wwwroot\AutoAppDemo'
  appPoolName: 'AutoAppDemo-pool'
  parentSiteName: 'Optimus App'
  appPortHttp: 8026
  appPortHttps: 8025

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the app'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

# ZIP the published output
- task: ArchiveFiles@2
  displayName: 'Zip Published Output'
  inputs:
    rootFolderOrFile: '$(publishDir)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/AutoAppDemo.zip'
    replaceExistingArchive: true

# Deploy: Create App Pool + App under Optimus App + Extract + Copy
- task: PowerShell@2
  displayName: 'Deploy AutoAppDemo under Optimus App'
  inputs:
    targetType: 'inline'
    script: |
      $siteName = "$(siteName)"
      $physicalPath = "$(physicalPath)"
      $appPoolName = "$(appPoolName)"
      $parentSite = "$(parentSiteName)"
      $zipPath = "$(Build.ArtifactStagingDirectory)\AutoAppDemo.zip"
      $httpPort = $(appPortHttp)
      $httpsPort = $(appPortHttps)

      Import-Module WebAdministration

      # First check if the parent site exists (Optimus App)
      Write-Host "Checking if parent site '$parentSite' exists..."
      if (!(Test-Path "IIS:\Sites\$parentSite")) {
          Write-Host "##vso[task.logissue type=error]Parent site '$parentSite' does not exist. Please create it first."
          exit 1
      } else {
          Write-Host "Found parent site: $parentSite"
      }
      
      Write-Host "Ensure physical path exists..."
      if (!(Test-Path $physicalPath)) {
          New-Item -ItemType Directory -Path $physicalPath -Force | Out-Null
          Write-Host "Created directory: $physicalPath"
      } else {
          Write-Host "Directory already exists: $physicalPath"
      }

      Write-Host "Creating/Validating App Pool..."
      if (!(Test-Path "IIS:\AppPools\$appPoolName")) {
          New-WebAppPool -Name $appPoolName
          Write-Host "Created App Pool: $appPoolName"
      } else {
          Write-Host "App Pool already exists: $appPoolName"
      }

      # Check if application exists under parent site
      Write-Host "Checking if application '$siteName' exists under '$parentSite'..."
      $appFullPath = "IIS:\Sites\$parentSite\$siteName"
      
      if (Test-Path $appFullPath) {
          Write-Host "Application '$siteName' already exists under '$parentSite', updating it..."
          Set-WebConfigurationProperty -Filter "/system.applicationHost/sites/site[@name='$parentSite']/application[@path='/$siteName']" -Name "applicationPool" -Value $appPoolName
      } else {
          # Create new application under the parent site
          Write-Host "Creating application under $parentSite..."
          New-WebApplication -Site $parentSite -Name $siteName -PhysicalPath $physicalPath -ApplicationPool $appPoolName
          Write-Host "Created IIS Application under $parentSite as $siteName"
      }
      
      # Clean old content in target directory
      Write-Host "Cleaning old content in $physicalPath..."
      Get-ChildItem -Path $physicalPath -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
      
      # Extract zip to physical path
      Write-Host "Extracting zip from $zipPath to $physicalPath..."
      
      # Ensure the directory is empty first
      if (Test-Path -Path $physicalPath) {
          Get-ChildItem -Path $physicalPath -Force | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
      }
      
      try {
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $physicalPath)
          Write-Host "Successfully extracted files to $physicalPath"
      } catch {
          Write-Host "##vso[task.logissue type=error]Failed to extract zip file: $_"
          throw "Failed to extract zip file: $_"
      }
      
      Write-Host "Setting file permissions..."
      $acl = Get-Acl $physicalPath
      $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS AppPool\$appPoolName", "ReadAndExecute", "ContainerInherit,ObjectInherit", "None", "Allow")
      $acl.SetAccessRule($accessRule)
      Set-Acl $physicalPath $acl
      
      Write-Host "Deployment completed successfully to $siteName under $parentSite"
      
# Clean up build artifacts to free memory
- task: PowerShell@2
  displayName: 'Clean up build artifacts'
  condition: always() # Run this even if previous steps fail
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Cleaning up build artifacts to free memory..."
      
      # Clean publish directory
      if (Test-Path "$(publishDir)") {
          Remove-Item -Path "$(publishDir)" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleaned up publish directory"
      }
      
      # Clean ZIP file
      if (Test-Path "$(Build.ArtifactStagingDirectory)/AutoAppDemo.zip") {
          Remove-Item -Path "$(Build.ArtifactStagingDirectory)/AutoAppDemo.zip" -Force -ErrorAction SilentlyContinue
          Write-Host "Cleaned up ZIP file"
      }
      
      # Run garbage collection to free memory
      [System.GC]::Collect()
      Write-Host "Memory cleanup completed"