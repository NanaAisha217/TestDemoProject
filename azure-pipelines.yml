trigger:
- main  

pool:
  name: Default  # Self-hosted agent pool

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'
  siteName: 'AutoAppDemo'
  physicalPath: 'C:\inetpub\wwwroot\AutoAppDemo'
  appPoolName: 'AutoAppDemo-pool'
  parentSiteName: 'Optimus Apps'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the app'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

# Diagnostic step to examine the publish directory
- task: PowerShell@2
  displayName: 'Examine publish directory'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "===== EXAMINING PUBLISH DIRECTORY CONTENTS ====="
      Write-Host "Publish directory: $(publishDir)"
      
      if (Test-Path "$(publishDir)") {
          Get-ChildItem -Path "$(publishDir)" -Recurse | Select-Object FullName | Format-Table -AutoSize
      } else {
          Write-Host "Publish directory does not exist!"
      }

# Direct deployment with verbose logging
- task: PowerShell@2
  displayName: 'Deploy with detailed logging'
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Continue"
      $VerbosePreference = "Continue"
      
      $siteName = "$(siteName)"
      $physicalPath = "$(physicalPath)"
      $appPoolName = "$(appPoolName)"
      $parentSite = "$(parentSiteName)"
      $sourcePath = "$(publishDir)"
      
      Write-Host "===== STARTING DEPLOYMENT WITH DETAILED LOGGING ====="
      Write-Host "Site Name: $siteName"
      Write-Host "Physical Path: $physicalPath"
      Write-Host "App Pool: $appPoolName"
      Write-Host "Parent Site: $parentSite"
      Write-Host "Source Path: $sourcePath"
      
      Import-Module WebAdministration -Verbose
      
      # Create/check app pool
      Write-Host "===== APP POOL SETUP ====="
      if (!(Test-Path "IIS:\AppPools\$appPoolName")) {
          Write-Host "Creating new app pool: $appPoolName"
          New-WebAppPool -Name $appPoolName -Verbose
      } else {
          Write-Host "App pool exists: $appPoolName"
      }
      
      # Prepare target directory
      Write-Host "===== DIRECTORY PREPARATION ====="
      if (!(Test-Path $physicalPath)) {
          Write-Host "Creating directory: $physicalPath"
          New-Item -ItemType Directory -Path $physicalPath -Force -Verbose
      } else {
          Write-Host "Target directory exists. Cleaning it..."
          Get-ChildItem -Path $physicalPath -Force | Remove-Item -Recurse -Force -Verbose
      }
      
      # Setup IIS application
      Write-Host "===== IIS APPLICATION SETUP ====="
      $appFullPath = "IIS:\Sites\$parentSite\$siteName"
      
      if (Test-Path $appFullPath) {
          Write-Host "Application exists. Updating it..."
          Set-WebConfigurationProperty -Filter "/system.applicationHost/sites/site[@name='$parentSite']/application[@path='/$siteName']" -Name "applicationPool" -Value $appPoolName -Verbose
      } else {
          Write-Host "Creating new application..."
          New-WebApplication -Site $parentSite -Name $siteName -PhysicalPath $physicalPath -ApplicationPool $appPoolName -Verbose
      }
      
      # Detailed list of source files
      Write-Host "===== SOURCE FILES ====="
      Get-ChildItem -Path $sourcePath -Recurse | Select-Object FullName | Format-Table -AutoSize
      
      # Copy files - explicit file copy to see exactly what's happening
      Write-Host "===== COPYING FILES ====="
      try {
          # First try to copy everything from inside the publish directory
          $sourceItems = Get-ChildItem -Path $sourcePath -Force
          
          foreach ($item in $sourceItems) {
              Write-Host "Copying $($item.FullName) to $physicalPath"
              if ($item.PSIsContainer) {
                  # It's a directory
                  Copy-Item -Path $item.FullName -Destination $physicalPath -Recurse -Force -Verbose
              } else {
                  # It's a file
                  Copy-Item -Path $item.FullName -Destination $physicalPath -Force -Verbose
              }
          }
          
          # Check if files were copied successfully
          Write-Host "===== VERIFYING DEPLOYMENT ====="
          $targetItems = Get-ChildItem -Path $physicalPath -Recurse
          Write-Host "Files in target directory after copying:"
          $targetItems | Select-Object FullName | Format-Table -AutoSize
          
          # Check for any zip files that might indicate something went wrong
          $zipFiles = $targetItems | Where-Object { $_.Extension -eq ".zip" }
          if ($zipFiles) {
              Write-Host "WARNING: Found zip files in target directory:"
              $zipFiles | Select-Object FullName | Format-Table -AutoSize
              
              # Try to extract any zip files found
              foreach ($zipFile in $zipFiles) {
                  Write-Host "Attempting to extract $($zipFile.FullName)"
                  $extractDir = Join-Path -Path $physicalPath -ChildPath "Extracted_$($zipFile.BaseName)"
                  New-Item -ItemType Directory -Path $extractDir -Force | Out-Null
                  
                  Write-Host "Extracting to $extractDir"
                  Expand-Archive -Path $zipFile.FullName -DestinationPath $extractDir -Force -Verbose
                  
                  # Move files from extraction directory to main directory
                  Get-ChildItem -Path $extractDir -Recurse | Move-Item -Destination $physicalPath -Force -Verbose
                  
                  # Remove the zip file and extraction directory
                  Remove-Item -Path $zipFile.FullName -Force -Verbose
                  Remove-Item -Path $extractDir -Recurse -Force -Verbose
              }
          }
          
          # Set permissions
          $acl = Get-Acl $physicalPath
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS AppPool\$appPoolName", "ReadAndExecute", "ContainerInherit,ObjectInherit", "None", "Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl $physicalPath $acl -Verbose
          
          Write-Host "Deployment completed successfully"
          
      } catch {
          Write-Host "ERROR: Failed to deploy: $_"
          Write-Host "Error details:"
          $_ | Format-List -Force
          throw
      }
      
      # Final verification
      Write-Host "===== FINAL DIRECTORY LISTING ====="
      Get-ChildItem -Path $physicalPath -Recurse | Select-Object FullName | Format-Table -AutoSize